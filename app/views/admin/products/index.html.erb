<%# TODO: フラッシュメッセージ %>
<div class="min-h-full" id="menu1">
    <%= render partial: 'layouts/admin/header' %>

    <main class="min-h-screen">
        <div class="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">
            <%# メインコンテンツ %>
            <div class="bg-white" id="menu2">
                <%# TODO: productが存在する条件文 %>
                <div class="mx-auto max-w-2xl px-4 pb-16 pt-20 sm:px-6 sm:py-18 lg:max-w-7xl lg:px-8">
                    <div class="sm:mx-auto sm:w-full sm:max-w-sm">
                        <%= image_tag "hannah_logo.png", alt: 'src', class: "mx-auto h-10 w-auto" %>
                        <h2 class="mt-6 text-center text-2xl font-bold leading-9 tracking-tight text-lime-900">Products</h2>
                    </div>

                    <%# TODO: selectのメッセージが出てない %>

                    <div class="mt-6 grid grid-cols-1 gap-x-6 gap-y-12 sm:grid-cols-2 lg:grid-cols-4 xl:gap-x-8">
                        <%# 商品カード(DB)  %>
                            <% @products.each do |product| %>
                                <div class="group relative">
                                <%= link_to edit_admin_product_path(product.id) do %>
                                    <input value="<%= product.name %>" autocomplete="off" type="hidden" name="order[select][<%= product.id %>][product_name]" id="_order_29_product_name">
                                    <div class="relative aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-md bg-gray-200 lg:aspect-none group-hover:opacity-75 lg:h-60">
                                        <%= image_tag(product.image.present? ? product.image : "no_image.jpg", alt: '', class: "aspect-square h-full w-full object-cover object-center lg:h-full lg:w-full") %>
                                        <% if product.sold_out_flg %>
                                            <p class="absolute bottom-0 mb-2 block w-full rounded-md bg-red-600 px-3.5 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600">sold out</p>
                                        <% elsif product.fast_shipping_flg %>
                                            <p class="absolute bottom-0 mb-2 block w-full rounded-md bg-lime-600 px-3.5 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-lime-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-lime-600">express delivery</p>
                                        <% end %>
                                    </div>
                                    <div class="mt-4 flex justify-between">
                                        <div>
                                            <h3 class="text-sm text-gray-700">
                                            <p class="text-turn-around">
                                                <span aria-hidden="true" class="absolute inset-0"></span>
                                                <%= product.name %>
                                            </p>
                                            </h3>
                                            <p class="mt-1 text-sm text-gray-500 text-turn-around"><%= product.summary %></p>
                                        </div>
                                    </div>
                                    <div class="w-2/3">
                                        <div class="relative mt-2">
                                            <p class="block w-full rounded-md bg-gray-600 px-3.5 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-gray-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-600">edit</p>
                                        </div>
                                    </div>
                                <% end %><%# /link_to %>
                                </div><%# /商品カード（DB） %>
                            <% end %><%# /products.each %>
                    </div>
                </div>
            </div><%# メインコンテンツここまで %>
        </div>
    </main>

    <%# フッター %>
    <%= render partial: 'layouts/admin/footer' %>
</div>
<%# TODO: JSを切り分けて保存 %>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // ボタン、メニューを定数定義
        const mobileMenuButton = document.querySelector('#toggleButton');
        const mobileMenu = document.getElementById('mobile-menu');

        // ハンバーガーメニュー押下でメニュー表示切り替え
        mobileMenuButton.addEventListener('click', function () {
        mobileMenu.classList.toggle('hidden');
        });

        // セレクトボックスが変更されたときの処理
        document.querySelectorAll('.choices_select').forEach(function(select) {
            select.addEventListener('change', function() {
                
                // 選択されたオプションの値を取得
                let selectedOption = select.options[select.selectedIndex];

                let inputString = selectedOption.innerText;

                // 正規表現パターン
                let pattern = /(\d+)g \/ (\d+)baht/;

                // パターンに一致する部分を抽出
                let matchResult = inputString.match(pattern);
                // console.log(matchResult);

                // マッチした部分の数値を取り出す
                if (matchResult && matchResult[1] && matchResult[2]) {
                let priceValue = parseInt(matchResult[2], 10);

                // 非表示のinputタグを取得
                let target = this.previousElementSibling;

                target.value = priceValue;
                }
            });
        });
    });


    window.onload = function() {
        // console.log('nul');
        // history.pushState(null, null, null);

        // window.addEventListener("popstate", function (e) {
        //     history.pushState(null, null, null);
        //     console.log('nulnulnul');
        //     history.go(1);
        //     alert('Do not use your back button.The input information will be reset.');
        //     return;
        // });

        document.querySelectorAll('.choices_select').forEach(function(select) {
            select.addEventListener('DOMContentLoaded', function() {
                console.log('リロードにより発火')
                // 選択されたオプションの値を取得
                let selectedOption = select.options[select.selectedIndex];

                let inputString = selectedOption.innerText;

                // 正規表現パターン
                let pattern = /(\d+)g \/ (\d+)baht/;

                // パターンに一致する部分を抽出
                let matchResult = inputString.match(pattern);
                // console.log(matchResult);

                // マッチした部分の数値を取り出す
                if (matchResult && matchResult[1] && matchResult[2]) {
                let priceValue = parseInt(matchResult[2], 10);

                // 非表示のinputタグを取得
                let target = this.previousElementSibling;

                target.value = priceValue;
                }
            });

        });

    };

    const smoothScrollTrigger = document.querySelectorAll('a[href^="#"]');
        for (let i = 0; i < smoothScrollTrigger.length; i++){
            smoothScrollTrigger[i].addEventListener('click', (e) => {
                e.preventDefault();
                let href = smoothScrollTrigger[i].getAttribute('href');
                let targetElement = document.getElementById(href.replace('#', ''));
                const rect = targetElement.getBoundingClientRect().top;
                const offset = window.pageYOffset;
                const gap = 60;
                const target = rect + offset - gap;
                window.scrollTo({
                    top: target,
                    behavior: 'smooth',
                });
            });
        }
</script>